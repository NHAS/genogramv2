{
  "version": 3,
  "sources": ["../../../pixi-graph/node_modules/node_modules/tslib/tslib.es6.js", "../../../pixi-graph/node_modules/@pixi/text/src/const.ts", "../../../pixi-graph/node_modules/@pixi/text/src/TextStyle.ts", "../../../pixi-graph/node_modules/@pixi/text/src/TextMetrics.ts", "../../../pixi-graph/node_modules/@pixi/text/src/Text.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n", "/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport enum TEXT_GRADIENT {\n    LINEAR_VERTICAL = 0,\n    LINEAR_HORIZONTAL = 1\n}\n", "// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nexport type TextStyleAlign = 'left'|'center'|'right'|'justify';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\nexport interface ITextStyle {\n    align: TextStyleAlign;\n    breakWords: boolean;\n    dropShadow: boolean;\n    dropShadowAlpha: number;\n    dropShadowAngle: number;\n    dropShadowBlur: number;\n    dropShadowColor: string|number;\n    dropShadowDistance: number;\n    fill: TextStyleFill;\n    fillGradientType: TEXT_GRADIENT;\n    fillGradientStops: number[];\n    fontFamily: string | string[];\n    fontSize: number | string;\n    fontStyle: TextStyleFontStyle;\n    fontVariant: TextStyleFontVariant;\n    fontWeight: TextStyleFontWeight;\n    letterSpacing: number;\n    lineHeight: number;\n    lineJoin: TextStyleLineJoin;\n    miterLimit: number;\n    padding: number;\n    stroke: string|number;\n    strokeThickness: number;\n    textBaseline: TextStyleTextBaseline;\n    trim: boolean;\n    whiteSpace: TextStyleWhiteSpace;\n    wordWrap: boolean;\n    wordWrapWidth: number;\n    leading: number;\n}\n\nconst defaultStyle: ITextStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nexport class TextStyle implements ITextStyle\n{\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', '800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style?: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    public reset(): void\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {string|number} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color: string|number): string\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if (typeof color === 'string')\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {string|number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color as string[];\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 - First array to compare\n * @param {Array} array2 - Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target - Target object to copy properties into\n * @param {Object} source - Source object for the properties to copy\n * @param {string} propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n", "import { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\ninterface IFontMetrics {\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = { [key: string]: number };\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    public text: string;\n    public style: TextStyle;\n    public width: number;\n    public height: number;\n    public lines: string[];\n    public lineWidths: number[];\n    public lineHeight: number;\n    public maxLineWidth: number;\n    public fontProperties: IFontMetrics;\n\n    public static METRICS_STRING: string;\n    public static BASELINE_SYMBOL: string;\n    public static BASELINE_MULTIPLIER: number;\n    public static HEIGHT_MULTIPLIER: number;\n\n    // TODO: These should be protected but they're initialized outside of the class.\n    public static _canvas: HTMLCanvasElement|OffscreenCanvas;\n    public static _context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D;\n    public static _fonts: { [font: string]: IFontMetrics };\n    public static _newlines: number[];\n    public static _breakingSpaces: number[];\n\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        /**\n         * The text that was measured\n         *\n         * @member {string}\n         */\n        this.text = text;\n\n        /**\n         * The style that was measured\n         *\n         * @member {PIXI.TextStyle}\n         */\n        this.style = style;\n\n        /**\n         * The measured width of the text\n         *\n         * @member {number}\n         */\n        this.width = width;\n\n        /**\n         * The measured height of the text\n         *\n         * @member {number}\n         */\n        this.height = height;\n\n        /**\n         * An array of lines of the text broken by new lines and wrapping is specified in style\n         *\n         * @member {string[]}\n         */\n        this.lines = lines;\n\n        /**\n         * An array of the line widths for each line matched to `lines`\n         *\n         * @member {number[]}\n         */\n        this.lineWidths = lineWidths;\n\n        /**\n         * The measured line height for this style\n         *\n         * @member {number}\n         */\n        this.lineHeight = lineHeight;\n\n        /**\n         * The maximum line width for all measured lines\n         *\n         * @member {number}\n         */\n        this.maxLineWidth = maxLineWidth;\n\n        /**\n         * The font properties object from TextMetrics.measureFont\n         *\n         * @member {PIXI.IFontMetrics}\n         */\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    public static measureText(text: string, style: TextStyle, wordWrap?: boolean, canvas = TextMetrics._canvas): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    private static wordWrap(text: string, style: TextStyle, canvas = TextMetrics._canvas): string\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}  A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            - The key\n     * @param  {number}                    letterSpacing  - The letter spacing\n     * @param  {object}                    cache          - The cache\n     * @param  {CanvasRenderingContext2D}  context        - The canvas context\n     * @return {number}                    The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace - The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace - The white space\n     * @return {boolean}  should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text - The text\n     * @return {string}  trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char - The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  char     - The character\n     * @param  {string}  [nextChar] - The next character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text - The text\n     * @return {string[]}  A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  token       - The token\n     * @param  {boolean}  breakWords - The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  char        - The character\n     * @param  {string}  nextChar    - The next character\n     * @param  {string}  token       - The token/word the characters are from\n     * @param  {number}  index       - The index in the token of the char\n     * @param  {boolean}  breakWords - The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  {string}  token - The token to split\n     * @return {string[]} The characters of the token\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.IFontMetrics} Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = ((): HTMLCanvasElement|OffscreenCanvas =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Height multiplier for setting height of canvas to calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name HEIGHT_MULTIPLIER\n * @type {number}\n * @default 2.00\n */\nTextMetrics.HEIGHT_MULTIPLIER = 2.0;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n", "/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture  } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Renderer } from '@pixi/core';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * New behavior for `lineHeight` that's meant to mimic HTML text. A value of `true` will\n     * make sure the first baseline is offset by the `lineHeight` value if it is greater than `fontSize`.\n     * A value of `false` will use the legacy behavior and not change the baseline of the first line.\n     * In the next major release, we'll enable this by default.\n     *\n     * @static\n     * @memberof PIXI.Text\n     * @member {boolean} nextLineHeightBehavior\n     * @default false\n     */\n    public static nextLineHeightBehavior = false;\n\n    public canvas: HTMLCanvasElement;\n    public context: CanvasRenderingContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    _resolution: number;\n    _autoResolution: boolean;\n    protected _text: string;\n    protected _font: string;\n    protected _style: TextStyle;\n    protected _styleListener: () => void;\n    private _ownCanvas: boolean;\n\n    /**\n     * @param {string} text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n     */\n    constructor(text: string, style?: Partial<ITextStyle>|TextStyle, canvas?: HTMLCanvasElement)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = document.createElement('canvas');\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        /**\n         * Keep track if this Text object created it's own canvas\n         * element (`true`) or uses the constructor argument (`false`).\n         * Used to workaround a GC issues with Safari < 13 when\n         * destroying Text. See `destroy` for more info.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._ownCanvas = ownCanvas;\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = canvas;\n\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number}\n         * @default PIXI.settings.RESOLUTION\n         */\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = null;\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._style = null;\n        /**\n         * Private listener to track style changes.\n         *\n         * @member {Function}\n         * @private\n         */\n        this._styleListener = null;\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {string}\n         * @private\n         */\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     *\n     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (!Text.nextLineHeightBehavior || lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param {string} text - The text to draw\n     * @param {number} x - Horizontal position to draw the text\n     * @param {number} y - Vertical position to draw the text\n     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     * @private\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /**\n     * Updates texture size based on canvas size\n     *\n     * @private\n     */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        // Recursively updates transform of all objects from the root to this one\n        this._recursivePostUpdateTransform();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    public getLocalBounds(rect: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @private\n     * @param {object} style - The style.\n     * @param {string[]} lines - The lines of text.\n     * @return {string|number|CanvasGradient} The fill style\n     */\n    private _generateFillStyle(style: TextStyle, lines: string[], metrics: TextMetrics): string|CanvasGradient|CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[]|CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get style(): TextStyle|Partial<ITextStyle>\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n        //       since the setter creates the TextStyle. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        return this._style;\n    }\n\n    set style(style: TextStyle|Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAgBA,IAAI,gBAAgB,SAAS,GAAG,GAAG;AAC/B,kBAAgB,OAAO,kBAClB,EAAE,WAAW,CAAA,EAAE,aAAc,SAAS,SAAUA,IAAGC,IAAG;AAAE,IAAAD,GAAE,YAAYC;EAAE,KACzE,SAAUD,IAAGC,IAAG;AAAE,aAAS,KAAKA,IAAC;AAAE,UAAIA,GAAE,eAAe,CAAC,GAAC;AAAE,QAAAD,GAAE,CAAC,IAAIC,GAAE,CAAC;MAAC;IAAA;EAAC;AAC5E,SAAO,cAAc,GAAG,CAAC;AAC7B;AAEO,SAAS,UAAU,GAAG,GAAG;AAC5B,gBAAc,GAAG,CAAC;AAClB,WAAS,KAAK;AAAE,SAAK,cAAc;EAAE;AACrC,IAAE,YAAY,MAAM,OAAO,OAAO,OAAO,CAAC,KAAK,GAAG,YAAY,EAAE,WAAW,IAAI,GAAE;AACrF;AChBA,IAAY;CAAZ,SAAYC,gBAAa;AACrB,EAAAA,eAAAA,eAAA,iBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,eAAAA,eAAA,mBAAA,IAAA,CAAA,IAAA;AACJ,GAHY,kBAAA,gBAAa,CAAA,EAAA;ACoCzB,IAAM,eAA2B;EAC7B,OAAO;EACP,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,iBAAiB,KAAK,KAAK;EAC3B,gBAAgB;EAChB,iBAAiB;EACjB,oBAAoB;EACpB,MAAM;EACN,kBAAkB,cAAc;EAChC,mBAAmB,CAAA;EACnB,YAAY;EACZ,UAAU;EACV,WAAW;EACX,aAAa;EACb,YAAY;EACZ,eAAe;EACf,YAAY;EACZ,UAAU;EACV,YAAY;EACZ,SAAS;EACT,QAAQ;EACR,iBAAiB;EACjB,cAAc;EACd,MAAM;EACN,YAAY;EACZ,UAAU;EACV,eAAe;EACf,SAAS;;AAGb,IAAM,sBAAsB;EACxB;EACA;EACA;EACA;EACA;EACA;AAAW;AAaf,IAAA,YAAA,WAAA;AAkFI,WAAAC,WAAY,OAA2B;AAEnC,SAAK,UAAU;AAEf,SAAK,MAAK;AAEV,uBAAmB,MAAM,OAAO,KAAK;;AASlC,EAAAA,WAAA,UAAA,QAAP,WAAA;AAEI,QAAM,mBAAwC,CAAA;AAE9C,uBAAmB,kBAAkB,MAAM,YAAY;AAEvD,WAAO,IAAIA,WAAU,gBAAgB;;AAMlC,EAAAA,WAAA,UAAA,QAAP,WAAA;AAEI,uBAAmB,MAAM,cAAc,YAAY;;AAQvD,SAAA,eAAIA,WAAA,WAAA,SAAK;;;;;;SAAT,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAU,OAAqB;AAE3B,UAAI,KAAK,WAAW,OACpB;AACI,aAAK,SAAS;AACd,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,cAAU;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAe,YAAmB;AAE9B,UAAI,KAAK,gBAAgB,YACzB;AACI,aAAK,cAAc;AACnB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,cAAU;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAe,YAAmB;AAE9B,UAAI,KAAK,gBAAgB,YACzB;AACI,aAAK,cAAc;AACnB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,mBAAe;;;;;;SAAnB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAoB,iBAAuB;AAEvC,UAAI,KAAK,qBAAqB,iBAC9B;AACI,aAAK,mBAAmB;AACxB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,mBAAe;;;;;;SAAnB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAoB,iBAAuB;AAEvC,UAAI,KAAK,qBAAqB,iBAC9B;AACI,aAAK,mBAAmB;AACxB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,kBAAc;;;;;;SAAlB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAmB,gBAAsB;AAErC,UAAI,KAAK,oBAAoB,gBAC7B;AACI,aAAK,kBAAkB;AACvB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,mBAAe;;;;;;SAAnB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAoB,iBAAgC;AAEhD,UAAM,cAAc,SAAS,eAAe;AAC5C,UAAI,KAAK,qBAAqB,aAC9B;AACI,aAAK,mBAAmB;AACxB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,sBAAkB;;;;;;SAAtB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAuB,oBAA0B;AAE7C,UAAI,KAAK,wBAAwB,oBACjC;AACI,aAAK,sBAAsB;AAC3B,aAAK;;;;;;AAWb,SAAA,eAAIA,WAAA,WAAA,QAAI;;;;;;;;SAAR,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAS,MAAmB;AAOxB,UAAM,cAAc,SAAS,IAAW;AACxC,UAAI,KAAK,UAAU,aACnB;AACI,aAAK,QAAQ;AACb,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,oBAAgB;;;;;;;SAApB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAqB,kBAA+B;AAEhD,UAAI,KAAK,sBAAsB,kBAC/B;AACI,aAAK,oBAAoB;AACzB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,qBAAiB;;;;;;;SAArB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAsB,mBAA2B;AAE7C,UAAI,CAAC,eAAe,KAAK,oBAAmB,iBAAiB,GAC7D;AACI,aAAK,qBAAqB;AAC1B,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,cAAU;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAe,YAA6B;AAExC,UAAI,KAAK,eAAe,YACxB;AACI,aAAK,cAAc;AACnB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,YAAQ;;;;;;;SAAZ,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAa,UAAyB;AAElC,UAAI,KAAK,cAAc,UACvB;AACI,aAAK,YAAY;AACjB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,aAAS;;;;;;;SAAb,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAc,WAA6B;AAEvC,UAAI,KAAK,eAAe,WACxB;AACI,aAAK,aAAa;AAClB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,eAAW;;;;;;;SAAf,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAgB,aAAiC;AAE7C,UAAI,KAAK,iBAAiB,aAC1B;AACI,aAAK,eAAe;AACpB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,cAAU;;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAe,YAA+B;AAE1C,UAAI,KAAK,gBAAgB,YACzB;AACI,aAAK,cAAc;AACnB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,iBAAa;;;;;;SAAjB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAkB,eAAqB;AAEnC,UAAI,KAAK,mBAAmB,eAC5B;AACI,aAAK,iBAAiB;AACtB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,cAAU;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAe,YAAkB;AAE7B,UAAI,KAAK,gBAAgB,YACzB;AACI,aAAK,cAAc;AACnB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,WAAO;;;;;;SAAX,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAY,SAAe;AAEvB,UAAI,KAAK,aAAa,SACtB;AACI,aAAK,WAAW;AAChB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,YAAQ;;;;;;;SAAZ,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAa,UAA2B;AAEpC,UAAI,KAAK,cAAc,UACvB;AACI,aAAK,YAAY;AACjB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,cAAU;;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAe,YAAkB;AAE7B,UAAI,KAAK,gBAAgB,YACzB;AACI,aAAK,cAAc;AACnB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,WAAO;;;;;;;SAAX,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAY,SAAe;AAEvB,UAAI,KAAK,aAAa,SACtB;AACI,aAAK,WAAW;AAChB,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,UAAM;;;;;;;SAAV,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAW,QAAuB;AAK9B,UAAM,cAAc,SAAS,MAAM;AACnC,UAAI,KAAK,YAAY,aACrB;AACI,aAAK,UAAU;AACf,aAAK;;;;;;AAUb,SAAA,eAAIA,WAAA,WAAA,mBAAe;;;;;;;SAAnB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAoB,iBAAuB;AAEvC,UAAI,KAAK,qBAAqB,iBAC9B;AACI,aAAK,mBAAmB;AACxB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,gBAAY;;;;;;SAAhB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAiB,cAAmC;AAEhD,UAAI,KAAK,kBAAkB,cAC3B;AACI,aAAK,gBAAgB;AACrB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,QAAI;;;;;;SAAR,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAS,MAAa;AAElB,UAAI,KAAK,UAAU,MACnB;AACI,aAAK,QAAQ;AACb,aAAK;;;;;;AAgBb,SAAA,eAAIA,WAAA,WAAA,cAAU;;;;;;;;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAe,YAA+B;AAE1C,UAAI,KAAK,gBAAgB,YACzB;AACI,aAAK,cAAc;AACnB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,YAAQ;;;;;;SAAZ,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAa,UAAiB;AAE1B,UAAI,KAAK,cAAc,UACvB;AACI,aAAK,YAAY;AACjB,aAAK;;;;;;AASb,SAAA,eAAIA,WAAA,WAAA,iBAAa;;;;;;SAAjB,WAAA;AAEI,aAAO,KAAK;;SAEhB,SAAkB,eAAqB;AAEnC,UAAI,KAAK,mBAAmB,eAC5B;AACI,aAAK,iBAAiB;AACtB,aAAK;;;;;;AASN,EAAAA,WAAA,UAAA,eAAP,WAAA;AAGI,QAAM,iBAAkB,OAAO,KAAK,aAAa,WAAe,KAAK,WAAQ,OAAO,KAAK;AAIzF,QAAI,eAAgC,KAAK;AAEzC,QAAI,CAAC,MAAM,QAAQ,KAAK,UAAU,GAClC;AACI,qBAAe,KAAK,WAAW,MAAM,GAAG;;AAG5C,aAAS,IAAI,aAAa,SAAS,GAAG,KAAK,GAAG,KAC9C;AAEI,UAAI,aAAa,aAAa,CAAC,EAAE,KAAI;AAGrC,UAAI,CAAE,qBAAsB,KAAK,UAAU,KAAK,oBAAoB,QAAQ,UAAU,IAAI,GAC1F;AACI,qBAAa,MAAI,aAAU;;AAE9B,mBAA0B,CAAC,IAAI;;AAGpC,WAAU,KAAK,YAAS,MAAI,KAAK,cAAW,MAAI,KAAK,aAAU,MAAI,iBAAc,MAAK,aAA0B,KAAK,GAAG;;AAEhI,SAAAA;AAAA,EAAC;AAQD,SAAS,eAAe,OAAoB;AAExC,MAAI,OAAO,UAAU,UACrB;AACI,WAAO,WAAW,KAAK;aAElB,OAAO,UAAU,UAC1B;AACI,QAAK,MAAM,QAAQ,IAAI,MAAM,GAC7B;AACI,cAAQ,MAAM,QAAQ,MAAM,GAAG;;;AAIvC,SAAO;AACX;AAWA,SAAS,SAAS,OAAsC;AAEpD,MAAI,CAAC,MAAM,QAAQ,KAAK,GACxB;AACI,WAAO,eAAe,KAAK;SAG/B;AACI,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GACpC;AACI,YAAM,CAAC,IAAI,eAAe,MAAM,CAAC,CAAC;;AAGtC,WAAO;;AAEf;AAUA,SAAS,eAAkB,QAAa,QAAW;AAE/C,MAAI,CAAC,MAAM,QAAQ,MAAM,KAAK,CAAC,MAAM,QAAQ,MAAM,GACnD;AACI,WAAO;;AAGX,MAAI,OAAO,WAAW,OAAO,QAC7B;AACI,WAAO;;AAGX,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GACrC;AACI,QAAI,OAAO,CAAC,MAAM,OAAO,CAAC,GAC1B;AACI,aAAO;;;AAIf,SAAO;AACX;AASA,SAAS,mBAAmB,QAA6B,QAA6B,aAAgC;AAClH,WAAW,QAAQ,aAAa;AAC5B,QAAI,MAAM,QAAQ,OAAO,IAAI,CAAC,GAAG;AAC7B,aAAO,IAAI,IAAI,OAAO,IAAI,EAAE,MAAK;WAC9B;AACH,aAAO,IAAI,IAAI,OAAO,IAAI;;;AAGtC;AC32BA,IAAA,cAAA,WAAA;AAmCI,WAAAC,aAAY,MAAc,OAAkB,OAAe,QAAgB,OAAiB,YACxF,YAAoB,cAAsB,gBAA4B;AAOtE,SAAK,OAAO;AAOZ,SAAK,QAAQ;AAOb,SAAK,QAAQ;AAOb,SAAK,SAAS;AAOd,SAAK,QAAQ;AAOb,SAAK,aAAa;AAOlB,SAAK,aAAa;AAOlB,SAAK,eAAe;AAOpB,SAAK,iBAAiB;;AAYZ,EAAAA,aAAA,cAAd,SAA0B,MAAc,OAAkB,UAAoBC,SAA4B;AAA5B,QAAAA,YAAA,QAAA;AAAA,MAAAA,UAASD,aAAY;IAAO;AAEtG,eAAY,aAAa,UAAa,aAAa,OAAQ,MAAM,WAAW;AAC5E,QAAM,OAAO,MAAM,aAAY;AAC/B,QAAM,iBAAiBA,aAAY,YAAY,IAAI;AAInD,QAAI,eAAe,aAAa,GAChC;AACI,qBAAe,WAAW,MAAM;AAChC,qBAAe,SAAS,MAAM;;AAGlC,QAAM,UAAUC,QAAO,WAAW,IAAI;AAEtC,YAAQ,OAAO;AAEf,QAAM,aAAa,WAAWD,aAAY,SAAS,MAAM,OAAOC,OAAM,IAAI;AAC1E,QAAM,QAAQ,WAAW,MAAM,gBAAgB;AAC/C,QAAM,aAAa,IAAI,MAAc,MAAM,MAAM;AACjD,QAAI,eAAe;AAEnB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAClC;AACI,UAAM,YAAY,QAAQ,YAAY,MAAM,CAAC,CAAC,EAAE,SAAU,MAAM,CAAC,EAAE,SAAS,KAAK,MAAM;AAEvF,iBAAW,CAAC,IAAI;AAChB,qBAAe,KAAK,IAAI,cAAc,SAAS;;AAEnD,QAAI,QAAQ,eAAe,MAAM;AAEjC,QAAI,MAAM,YACV;AACI,eAAS,MAAM;;AAGnB,QAAM,aAAa,MAAM,cAAc,eAAe,WAAW,MAAM;AACvE,QAAI,SAAS,KAAK,IAAI,YAAY,eAAe,WAAW,MAAM,eAAe,KACzE,MAAM,SAAS,MAAM,aAAa,MAAM;AAEhD,QAAI,MAAM,YACV;AACI,gBAAU,MAAM;;AAGpB,WAAO,IAAID,aACP,MACA,OACA,OACA,QACA,OACA,YACA,aAAa,MAAM,SACnB,cACA,cAAc;;AAcP,EAAAA,aAAA,WAAf,SAAwB,MAAc,OAAkBC,SAA4B;AAA5B,QAAAA,YAAA,QAAA;AAAA,MAAAA,UAASD,aAAY;IAAO;AAEhF,QAAM,UAAUC,QAAO,WAAW,IAAI;AAEtC,QAAI,QAAQ;AACZ,QAAI,OAAO;AACX,QAAI,QAAQ;AAEZ,QAAM,QAA6B,uBAAO,OAAO,IAAI;AAC7C,QAAA,gBAA8B,MAAK,eAApB,aAAe,MAAK;AAG3C,QAAM,iBAAiBD,aAAY,eAAe,UAAU;AAC5D,QAAM,mBAAmBA,aAAY,iBAAiB,UAAU;AAGhE,QAAI,mBAAmB,CAAC;AAQxB,QAAM,gBAAgB,MAAM,gBAAgB;AAG5C,QAAM,SAASA,aAAY,SAAS,IAAI;AAExC,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KACnC;AAEI,UAAI,QAAQ,OAAO,CAAC;AAGpB,UAAIA,aAAY,UAAU,KAAK,GAC/B;AAEI,YAAI,CAAC,kBACL;AACI,mBAASA,aAAY,QAAQ,IAAI;AACjC,6BAAmB,CAAC;AACpB,iBAAO;AACP,kBAAQ;AACR;;AAKJ,gBAAQ;;AAIZ,UAAI,gBACJ;AAEI,YAAM,sBAAsBA,aAAY,gBAAgB,KAAK;AAC7D,YAAM,sBAAsBA,aAAY,gBAAgB,KAAK,KAAK,SAAS,CAAC,CAAC;AAE7E,YAAI,uBAAuB,qBAC3B;AACI;;;AAKR,UAAM,aAAaA,aAAY,aAAa,OAAO,eAAe,OAAO,OAAO;AAGhF,UAAI,aAAa,eACjB;AAEI,YAAI,SAAS,IACb;AAEI,mBAASA,aAAY,QAAQ,IAAI;AACjC,iBAAO;AACP,kBAAQ;;AAIZ,YAAIA,aAAY,cAAc,OAAO,MAAM,UAAU,GACrD;AAEI,cAAM,aAAaA,aAAY,cAAc,KAAK;AAGlD,mBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KACvC;AACI,gBAAI,OAAO,WAAW,CAAC;AAEvB,gBAAI,IAAI;AAGR,mBAAO,WAAW,IAAI,CAAC,GACvB;AACI,kBAAM,WAAW,WAAW,IAAI,CAAC;AACjC,kBAAM,WAAW,KAAK,KAAK,SAAS,CAAC;AAGrC,kBAAI,CAACA,aAAY,cAAc,UAAU,UAAU,OAAO,GAAG,MAAM,UAAU,GAC7E;AAEI,wBAAQ;qBAGZ;AACI;;AAGJ;;AAGJ,iBAAK,KAAK,SAAS;AAEnB,gBAAM,iBAAiBA,aAAY,aAAa,MAAM,eAAe,OAAO,OAAO;AAEnF,gBAAI,iBAAiB,QAAQ,eAC7B;AACI,uBAASA,aAAY,QAAQ,IAAI;AACjC,iCAAmB;AACnB,qBAAO;AACP,sBAAQ;;AAGZ,oBAAQ;AACR,qBAAS;;eAMjB;AAGI,cAAI,KAAK,SAAS,GAClB;AACI,qBAASA,aAAY,QAAQ,IAAI;AACjC,mBAAO;AACP,oBAAQ;;AAGZ,cAAM,cAAc,MAAM,OAAO,SAAS;AAG1C,mBAASA,aAAY,QAAQ,OAAO,CAAC,WAAW;AAChD,6BAAmB;AACnB,iBAAO;AACP,kBAAQ;;aAMhB;AAGI,YAAI,aAAa,QAAQ,eACzB;AAEI,6BAAmB;AAGnB,mBAASA,aAAY,QAAQ,IAAI;AAGjC,iBAAO;AACP,kBAAQ;;AAIZ,YAAI,KAAK,SAAS,KAAK,CAACA,aAAY,gBAAgB,KAAK,KAAK,kBAC9D;AAEI,kBAAQ;AAGR,mBAAS;;;;AAKrB,aAASA,aAAY,QAAQ,MAAM,KAAK;AAExC,WAAO;;AAYI,EAAAA,aAAA,UAAf,SAAuB,MAAc,SAAc;AAAd,QAAA,YAAA,QAAA;AAAA,gBAAA;IAAc;AAE/C,WAAOA,aAAY,UAAU,IAAI;AAEjC,WAAQ,UAAc,OAAI,OAAO;AAEjC,WAAO;;AAaI,EAAAA,aAAA,eAAf,SAA4B,KAAa,eAAuB,OAC5D,SAAmE;AAEnE,QAAI,QAAQ,MAAM,GAAG;AAErB,QAAI,OAAO,UAAU,UACrB;AACI,UAAM,UAAY,IAAI,SAAU;AAEhC,cAAQ,QAAQ,YAAY,GAAG,EAAE,QAAQ;AACzC,YAAM,GAAG,IAAI;;AAGjB,WAAO;;AAUI,EAAAA,aAAA,iBAAf,SAA8B,YAA+B;AAEzD,WAAQ,eAAe,YAAY,eAAe;;AAUvC,EAAAA,aAAA,mBAAf,SAAgC,YAA+B;AAE3D,WAAQ,eAAe;;AAUZ,EAAAA,aAAA,YAAf,SAAyB,MAAY;AAEjC,QAAI,OAAO,SAAS,UACpB;AACI,aAAO;;AAGX,aAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,KACtC;AACI,UAAM,OAAO,KAAK,CAAC;AAEnB,UAAI,CAACA,aAAY,gBAAgB,IAAI,GACrC;AACI;;AAGJ,aAAO,KAAK,MAAM,GAAG,EAAE;;AAG3B,WAAO;;AAUI,EAAAA,aAAA,YAAf,SAAyB,MAAY;AAEjC,QAAI,OAAO,SAAS,UACpB;AACI,aAAO;;AAGX,WAAQA,aAAY,UAAU,QAAQ,KAAK,WAAW,CAAC,CAAC,KAAK;;AAc1D,EAAAA,aAAA,kBAAP,SAAuB,MAAc,WAAkB;AAEnD,QAAI,OAAO,SAAS,UACpB;AACI,aAAO;;AAGX,WAAQA,aAAY,gBAAgB,QAAQ,KAAK,WAAW,CAAC,CAAC,KAAK;;AAUxD,EAAAA,aAAA,WAAf,SAAwB,MAAY;AAEhC,QAAM,SAAmB,CAAA;AACzB,QAAI,QAAQ;AAEZ,QAAI,OAAO,SAAS,UACpB;AACI,aAAO;;AAGX,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KACjC;AACI,UAAM,OAAO,KAAK,CAAC;AACnB,UAAM,WAAW,KAAK,IAAI,CAAC;AAE3B,UAAIA,aAAY,gBAAgB,MAAM,QAAQ,KAAKA,aAAY,UAAU,IAAI,GAC7E;AACI,YAAI,UAAU,IACd;AACI,iBAAO,KAAK,KAAK;AACjB,kBAAQ;;AAGZ,eAAO,KAAK,IAAI;AAEhB;;AAGJ,eAAS;;AAGb,QAAI,UAAU,IACd;AACI,aAAO,KAAK,KAAK;;AAGrB,WAAO;;AAcJ,EAAAA,aAAA,gBAAP,SAAqB,QAAgB,YAAmB;AAEpD,WAAO;;AAkBJ,EAAAA,aAAA,gBAAP,SAAqB,OAAe,WAAmB,QAAgB,QACnE,aAAoB;AAEpB,WAAO;;AAiBJ,EAAAA,aAAA,gBAAP,SAAqB,OAAa;AAE9B,WAAO,MAAM,MAAM,EAAE;;AAUX,EAAAA,aAAA,cAAd,SAA0B,MAAY;AAGlC,QAAIA,aAAY,OAAO,IAAI,GAC3B;AACI,aAAOA,aAAY,OAAO,IAAI;;AAGlC,QAAM,aAA2B;MAC7B,QAAQ;MACR,SAAS;MACT,UAAU;;AAGd,QAAMC,UAASD,aAAY;AAC3B,QAAM,UAAUA,aAAY;AAE5B,YAAQ,OAAO;AAEf,QAAM,gBAAgBA,aAAY,iBAAiBA,aAAY;AAC/D,QAAM,QAAQ,KAAK,KAAK,QAAQ,YAAY,aAAa,EAAE,KAAK;AAChE,QAAI,WAAW,KAAK,KAAK,QAAQ,YAAYA,aAAY,eAAe,EAAE,KAAK;AAC/E,QAAM,SAAS,KAAK,KAAKA,aAAY,oBAAoB,QAAQ;AAEjE,eAAW,WAAWA,aAAY,sBAAsB;AAExD,IAAAC,QAAO,QAAQ;AACf,IAAAA,QAAO,SAAS;AAEhB,YAAQ,YAAY;AACpB,YAAQ,SAAS,GAAG,GAAG,OAAO,MAAM;AAEpC,YAAQ,OAAO;AAEf,YAAQ,eAAe;AACvB,YAAQ,YAAY;AACpB,YAAQ,SAAS,eAAe,GAAG,QAAQ;AAE3C,QAAM,YAAY,QAAQ,aAAa,GAAG,GAAG,OAAO,MAAM,EAAE;AAC5D,QAAM,SAAS,UAAU;AACzB,QAAM,OAAO,QAAQ;AAErB,QAAI,IAAI;AACR,QAAI,MAAM;AACV,QAAI,OAAO;AAGX,SAAK,IAAI,GAAG,IAAI,UAAU,EAAE,GAC5B;AACI,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK,GAC/B;AACI,YAAI,UAAU,MAAM,CAAC,MAAM,KAC3B;AACI,iBAAO;AACP;;;AAGR,UAAI,CAAC,MACL;AACI,eAAO;aAGX;AACI;;;AAIR,eAAW,SAAS,WAAW;AAE/B,UAAM,SAAS;AACf,WAAO;AAGP,SAAK,IAAI,QAAQ,IAAI,UAAU,EAAE,GACjC;AACI,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK,GAC/B;AACI,YAAI,UAAU,MAAM,CAAC,MAAM,KAC3B;AACI,iBAAO;AACP;;;AAIR,UAAI,CAAC,MACL;AACI,eAAO;aAGX;AACI;;;AAIR,eAAW,UAAU,IAAI;AACzB,eAAW,WAAW,WAAW,SAAS,WAAW;AAErD,IAAAD,aAAY,OAAO,IAAI,IAAI;AAE3B,WAAO;;AASG,EAAAA,aAAA,eAAd,SAA2B,MAAS;AAAT,QAAA,SAAA,QAAA;AAAA,aAAA;IAAS;AAEhC,QAAI,MACJ;AACI,aAAOA,aAAY,OAAO,IAAI;WAGlC;AACI,MAAAA,aAAY,SAAS,CAAA;;;AAGjC,SAAAA;AAAA,EAAC;AAaD,IAAM,SAAU,WAAA;AAEZ,MACA;AAEI,QAAM,IAAI,IAAI,gBAAgB,GAAG,CAAC;AAClC,QAAM,UAAU,EAAE,WAAW,IAAI;AAEjC,QAAI,WAAW,QAAQ,aACvB;AACI,aAAO;;AAGX,WAAO,SAAS,cAAc,QAAQ;WAEnC,IAAP;AAEI,WAAO,SAAS,cAAc,QAAQ;;AAE9C,EAAC;AAED,OAAO,QAAQ,OAAO,SAAS;AAS/B,YAAY,UAAU;AAStB,YAAY,WAAW,OAAO,WAAW,IAAI;AAS7C,YAAY,SAAS,CAAA;AAYrB,YAAY,iBAAiB;AAW7B,YAAY,kBAAkB;AAW9B,YAAY,sBAAsB;AAWlC,YAAY,oBAAoB;AAShC,YAAY,YAAY;EACpB;EACA;AAAM;AAUV,YAAY,kBAAkB;EAC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAM;AC92BV,IAAM,wBAAyC;EAC3C,SAAS;EACT,UAAU;EACV,aAAa;;AA4BjB,IAAA,OAAA,SAAA,QAAA;AAA0B,YAAAE,OAAA,MAAA;AAiCtB,WAAAA,MAAY,MAAc,OAAuCD,SAA0B;AAA3F,QAAA,QAAA;AAEI,QAAI,YAAY;AAEhB,QAAI,CAACA,SACL;AACI,MAAAA,UAAS,SAAS,cAAc,QAAQ;AACxC,kBAAY;;AAGhB,IAAAA,QAAO,QAAQ;AACf,IAAAA,QAAO,SAAS;AAEhB,QAAM,UAAU,QAAQ,KAAKA,OAAM;AAEnC,YAAQ,OAAO,IAAI,UAAS;AAC5B,YAAQ,OAAO,IAAI,UAAS;AAE5B,YAAA,OAAA,KAAA,MAAM,OAAO,KAAC;AAWd,UAAK,aAAa;AAOlB,UAAK,SAASA;AAMd,UAAK,UAAU,MAAK,OAAO,WAAW,IAAI;AAQ1C,UAAK,cAAc,SAAS;AAC5B,UAAK,kBAAkB;AAQvB,UAAK,QAAQ;AAQb,UAAK,SAAS;AAOd,UAAK,iBAAiB;AAQtB,UAAK,QAAQ;AAEb,UAAK,OAAO;AACZ,UAAK,QAAQ;AAEb,UAAK,eAAe;;;AAWjB,EAAAC,MAAA,UAAA,aAAP,SAAkB,cAAqB;AAEnC,QAAM,QAAQ,KAAK;AAGnB,QAAI,KAAK,iBAAiB,MAAM,SAChC;AACI,WAAK,QAAQ;AACb,WAAK,eAAe,MAAM;;AAG9B,QAAI,CAAC,KAAK,SAAS,cACnB;AACI;;AAGJ,SAAK,QAAQ,KAAK,OAAO,aAAY;AAErC,QAAM,UAAU,KAAK;AACrB,QAAM,WAAW,YAAY,YAAY,KAAK,SAAS,KAAK,KAAK,QAAQ,KAAK,OAAO,UAAU,KAAK,MAAM;AAC1G,QAAM,QAAQ,SAAS;AACvB,QAAM,SAAS,SAAS;AACxB,QAAM,QAAQ,SAAS;AACvB,QAAM,aAAa,SAAS;AAC5B,QAAM,aAAa,SAAS;AAC5B,QAAM,eAAe,SAAS;AAC9B,QAAM,iBAAiB,SAAS;AAEhC,SAAK,OAAO,QAAQ,KAAK,KAAK,KAAK,KAAM,KAAK,IAAI,GAAG,KAAK,IAAK,MAAM,UAAU,CAAE,IAAK,KAAK,WAAW;AACtG,SAAK,OAAO,SAAS,KAAK,KAAK,KAAK,KAAM,KAAK,IAAI,GAAG,MAAM,IAAK,MAAM,UAAU,CAAE,IAAK,KAAK,WAAW;AAExG,YAAQ,MAAM,KAAK,aAAa,KAAK,WAAW;AAEhD,YAAQ,UAAU,GAAG,GAAG,KAAK,OAAO,OAAO,KAAK,OAAO,MAAM;AAE7D,YAAQ,OAAO,KAAK;AACpB,YAAQ,YAAY,MAAM;AAC1B,YAAQ,eAAe,MAAM;AAC7B,YAAQ,WAAW,MAAM;AACzB,YAAQ,aAAa,MAAM;AAE3B,QAAI;AACJ,QAAI;AAGJ,QAAM,cAAc,MAAM,aAAa,IAAI;AAa3C,aAAS,IAAI,GAAG,IAAI,aAAa,EAAE,GACnC;AACI,UAAM,eAAe,MAAM,cAAc,MAAM;AAE/C,UAAM,eAAe,eAAe,KAAK,KAAK,KAAK,IAAI,GAAG,MAAM,IAAK,MAAM,UAAU,CAAE,IAAI;AAC3F,UAAM,iBAAiB,eAAe,KAAK;AAE3C,UAAI,cACJ;AAII,gBAAQ,YAAY;AACpB,gBAAQ,cAAc;AAEtB,YAAM,kBAAkB,MAAM;AAC9B,YAAM,MAAM,QAAQ,OAAO,oBAAoB,WAAW,kBAAkB,WAAW,eAAe,CAAC;AAEvG,gBAAQ,cAAc,UAAQ,IAAI,CAAC,IAAI,MAAG,MAAI,IAAI,CAAC,IAAI,MAAG,MAAI,IAAI,CAAC,IAAI,MAAG,MAAI,MAAM,kBAAe;AACnG,gBAAQ,aAAa,MAAM;AAC3B,gBAAQ,gBAAgB,KAAK,IAAI,MAAM,eAAe,IAAI,MAAM;AAChE,gBAAQ,gBAAiB,KAAK,IAAI,MAAM,eAAe,IAAI,MAAM,qBAAsB;aAG3F;AAEI,gBAAQ,YAAY,KAAK,mBAAmB,OAAO,OAAO,QAAQ;AAIlE,gBAAQ,cAAc,MAAM;AAE5B,gBAAQ,cAAc;AACtB,gBAAQ,aAAa;AACrB,gBAAQ,gBAAgB;AACxB,gBAAQ,gBAAgB;;AAG5B,UAAI,sBAAsB,aAAa,eAAe,YAAY;AAElE,UAAI,CAACA,MAAK,0BAA0B,aAAa,eAAe,WAAW,GAC3E;AACI,6BAAqB;;AAIzB,eAAS,MAAI,GAAG,MAAI,MAAM,QAAQ,OAClC;AACI,wBAAgB,MAAM,kBAAkB;AACxC,wBAAkB,MAAM,kBAAkB,IAAM,MAAI,aAAe,eAAe,SAC5E;AAEN,YAAI,MAAM,UAAU,SACpB;AACI,2BAAiB,eAAe,WAAW,GAAC;mBAEvC,MAAM,UAAU,UACzB;AACI,4BAAkB,eAAe,WAAW,GAAC,KAAK;;AAGtD,YAAI,MAAM,UAAU,MAAM,iBAC1B;AACI,eAAK,kBACD,MAAM,GAAC,GACP,gBAAgB,MAAM,SACtB,gBAAgB,MAAM,UAAU,cAChC,IAAI;;AAIZ,YAAI,MAAM,MACV;AACI,eAAK,kBACD,MAAM,GAAC,GACP,gBAAgB,MAAM,SACtB,gBAAgB,MAAM,UAAU,YAAY;;;;AAM5D,SAAK,cAAa;;AAYd,EAAAA,MAAA,UAAA,oBAAR,SAA0B,MAAc,GAAW,GAAW,UAAgB;AAAhB,QAAA,aAAA,QAAA;AAAA,iBAAA;IAAgB;AAE1E,QAAM,QAAQ,KAAK;AAGnB,QAAM,gBAAgB,MAAM;AAE5B,QAAI,kBAAkB,GACtB;AACI,UAAI,UACJ;AACI,aAAK,QAAQ,WAAW,MAAM,GAAG,CAAC;aAGtC;AACI,aAAK,QAAQ,SAAS,MAAM,GAAG,CAAC;;AAGpC;;AAGJ,QAAI,kBAAkB;AAQtB,QAAM,cAAc,MAAM,OAAO,MAAM,KAAK,IAAI,IAAI,KAAK,MAAM,EAAE;AACjE,QAAI,gBAAgB,KAAK,QAAQ,YAAY,IAAI,EAAE;AACnD,QAAI,eAAe;AAEnB,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,EAAE,GAC1C;AACI,UAAM,cAAc,YAAY,CAAC;AAEjC,UAAI,UACJ;AACI,aAAK,QAAQ,WAAW,aAAa,iBAAiB,CAAC;aAG3D;AACI,aAAK,QAAQ,SAAS,aAAa,iBAAiB,CAAC;;AAEzD,qBAAe,KAAK,QAAQ,YAAY,KAAK,UAAU,IAAI,CAAC,CAAC,EAAE;AAC/D,yBAAmB,gBAAgB,eAAe;AAClD,sBAAgB;;;AAShB,EAAAA,MAAA,UAAA,gBAAR,WAAA;AAEI,QAAMD,UAAS,KAAK;AAEpB,QAAI,KAAK,OAAO,MAChB;AACI,UAAM,UAAU,WAAWA,OAAM;AAEjC,UAAI,QAAQ,MACZ;AACI,QAAAA,QAAO,QAAQ,QAAQ;AACvB,QAAAA,QAAO,SAAS,QAAQ;AACxB,aAAK,QAAQ,aAAa,QAAQ,MAAM,GAAG,CAAC;;;AAIpD,QAAM,UAAU,KAAK;AACrB,QAAM,QAAQ,KAAK;AACnB,QAAM,UAAU,MAAM,OAAO,IAAI,MAAM;AACvC,QAAM,cAAc,QAAQ;AAE5B,YAAQ,KAAK,QAAQ,QAAQ,OAAO,QAAQA,QAAO,QAAQ,KAAK;AAChE,YAAQ,KAAK,SAAS,QAAQ,OAAO,SAASA,QAAO,SAAS,KAAK;AACnE,YAAQ,KAAK,IAAI,CAAC;AAClB,YAAQ,KAAK,IAAI,CAAC;AAElB,YAAQ,KAAK,QAAQ,QAAQ,OAAO,QAAS,UAAU;AACvD,YAAQ,KAAK,SAAS,QAAQ,OAAO,SAAU,UAAU;AAGzD,SAAK,iBAAgB;AAErB,gBAAY,YAAYA,QAAO,OAAOA,QAAO,QAAQ,KAAK,WAAW;AAErE,YAAQ,UAAS;AAGjB,SAAK,8BAA6B;AAElC,SAAK,QAAQ;;AASP,EAAAC,MAAA,UAAA,UAAV,SAAkB,UAAkB;AAEhC,QAAI,KAAK,mBAAmB,KAAK,gBAAgB,SAAS,YAC1D;AACI,WAAK,cAAc,SAAS;AAC5B,WAAK,QAAQ;;AAGjB,SAAK,WAAW,IAAI;AAEpB,WAAA,UAAM,QAAO,KAAA,MAAC,QAAQ;;AASnB,EAAAA,MAAA,UAAA,iBAAP,SAAsB,MAAe;AAEjC,SAAK,WAAW,IAAI;AAEpB,WAAO,OAAA,UAAM,eAAe,KAAK,MAAM,IAAI;;AAOrC,EAAAA,MAAA,UAAA,mBAAV,WAAA;AAEI,SAAK,WAAW,IAAI;AACpB,SAAK,kBAAiB;AAEtB,SAAK,QAAQ,QAAQ,KAAK,UAAU;;AAWhC,EAAAA,MAAA,UAAA,qBAAR,SAA2B,OAAkB,OAAiB,SAAoB;AAK9E,QAAM,YAA0D,MAAM;AAEtE,QAAI,CAAC,MAAM,QAAQ,SAAS,GAC5B;AACI,aAAO;eAEF,UAAU,WAAW,GAC9B;AACI,aAAO,UAAU,CAAC;;AAKtB,QAAI;AAIJ,QAAM,uBAAwB,MAAM,aAAc,MAAM,qBAAqB;AAG7E,QAAM,UAAU,MAAM,WAAW;AAEjC,QAAM,QAAS,KAAK,OAAO,QAAQ,KAAK,cAAe,uBAAwB,UAAU;AACzF,QAAM,SAAU,KAAK,OAAO,SAAS,KAAK,cAAe,uBAAwB,UAAU;AAG3F,QAAM,OAAO,UAAU,MAAK;AAC5B,QAAM,oBAAoB,MAAM,kBAAkB,MAAK;AAGvD,QAAI,CAAC,kBAAkB,QACvB;AACI,UAAM,cAAc,KAAK,SAAS;AAElC,eAAS,IAAI,GAAG,IAAI,aAAa,EAAE,GACnC;AACI,0BAAkB,KAAK,IAAI,WAAW;;;AAM9C,SAAK,QAAQ,UAAU,CAAC,CAAC;AACzB,sBAAkB,QAAQ,CAAC;AAE3B,SAAK,KAAK,UAAU,UAAU,SAAS,CAAC,CAAC;AACzC,sBAAkB,KAAK,CAAC;AAExB,QAAI,MAAM,qBAAqB,cAAc,iBAC7C;AAEI,iBAAW,KAAK,QAAQ,qBAAqB,QAAQ,GAAG,SAAS,QAAQ,GAAG,SAAS,OAAO;AAM5F,UAAM,aAAa,QAAQ,eAAe,WAAW,MAAM;AAE3D,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAClC;AACI,YAAM,iBAAkB,QAAQ,cAAc,IAAI,KAAM;AACxD,YAAM,cAAc,QAAQ,aAAa;AACzC,YAAI,wBAAwB;AAG5B,YAAI,IAAI,KAAK,iBAAiB,aAC9B;AACI,mCAAyB,cAAc,kBAAkB;;AAG7D,YAAM,iBAAiB,cAAc;AACrC,YAAM,cAAc,QAAQ,cAAc,IAAI;AAC9C,YAAI,sBAAsB;AAG1B,YAAI,IAAI,IAAI,MAAM,UAAU,cAAc,gBAC1C;AACI,iCAAuB,iBAAiB,eAAe;;AAI3D,YAAM,sBAAsB,sBAAsB,yBAAyB;AAE3E,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KACjC;AAEI,cAAI,WAAW;AAEf,cAAI,OAAO,kBAAkB,CAAC,MAAM,UACpC;AACI,uBAAW,kBAAkB,CAAC;iBAGlC;AACI,uBAAW,IAAI,KAAK;;AAGxB,cAAI,aAAa,KAAK,IAAI,GAAG,KAAK,IAAI,GACjC,wBAAwB,SAAW,WAAW,kBAAmB,CAAC;AAGvE,uBAAa,OAAO,WAAW,QAAQ,CAAC,CAAC;AACzC,mBAAS,aAAa,YAAY,KAAK,CAAC,CAAC;;;WAKrD;AAEI,iBAAW,KAAK,QAAQ,qBAAqB,SAAS,SAAS,GAAG,QAAQ,SAAS,SAAS,CAAC;AAI7F,UAAM,kBAAkB,KAAK,SAAS;AACtC,UAAI,mBAAmB;AAEvB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KACjC;AACI,YAAI,OAAI;AAER,YAAI,OAAO,kBAAkB,CAAC,MAAM,UACpC;AACI,iBAAO,kBAAkB,CAAC;eAG9B;AACI,iBAAO,mBAAmB;;AAE9B,iBAAS,aAAa,MAAM,KAAK,CAAC,CAAC;AACnC;;;AAIR,WAAO;;AAeJ,EAAAA,MAAA,UAAA,UAAP,SAAe,SAAiC;AAE5C,QAAI,OAAO,YAAY,WACvB;AACI,gBAAU,EAAE,UAAU,QAAO;;AAGjC,cAAU,OAAO,OAAO,CAAA,GAAI,uBAAuB,OAAO;AAE1D,WAAA,UAAM,QAAO,KAAA,MAAC,OAAO;AAIrB,QAAI,KAAK,YACT;AACI,WAAK,OAAO,SAAS,KAAK,OAAO,QAAQ;;AAI7C,SAAK,UAAU;AACf,SAAK,SAAS;AAEd,SAAK,SAAS;;AAQlB,SAAA,eAAIA,MAAA,WAAA,SAAK;;;;;;SAAT,WAAA;AAEI,WAAK,WAAW,IAAI;AAEpB,aAAO,KAAK,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK,SAAS,KAAK;;SAGvD,SAAU,OAAa;AAEnB,WAAK,WAAW,IAAI;AAEpB,UAAM,IAAI,KAAK,KAAK,MAAM,CAAC,KAAK;AAEhC,WAAK,MAAM,IAAI,IAAI,QAAQ,KAAK,SAAS,KAAK;AAC9C,WAAK,SAAS;;;;;AAQlB,SAAA,eAAIA,MAAA,WAAA,UAAM;;;;;;SAAV,WAAA;AAEI,WAAK,WAAW,IAAI;AAEpB,aAAO,KAAK,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK,SAAS,KAAK;;SAGvD,SAAW,OAAa;AAEpB,WAAK,WAAW,IAAI;AAEpB,UAAM,IAAI,KAAK,KAAK,MAAM,CAAC,KAAK;AAEhC,WAAK,MAAM,IAAI,IAAI,QAAQ,KAAK,SAAS,KAAK;AAC9C,WAAK,UAAU;;;;;AASnB,SAAA,eAAIA,MAAA,WAAA,SAAK;;;;;;;SAAT,WAAA;AAKI,aAAO,KAAK;;SAGhB,SAAU,OAAoC;AAE1C,cAAQ,SAAS,CAAA;AAEjB,UAAI,iBAAiB,WACrB;AACI,aAAK,SAAS;aAGlB;AACI,aAAK,SAAS,IAAI,UAAU,KAAK;;AAGrC,WAAK,eAAe;AACpB,WAAK,QAAQ;;;;;AAQjB,SAAA,eAAIA,MAAA,WAAA,QAAI;;;;;;SAAR,WAAA;AAEI,aAAO,KAAK;;SAGhB,SAAS,MAAY;AAEjB,aAAO,OAAO,SAAS,QAAQ,SAAS,SAAY,KAAK,IAAI;AAE7D,UAAI,KAAK,UAAU,MACnB;AACI;;AAEJ,WAAK,QAAQ;AACb,WAAK,QAAQ;;;;;AASjB,SAAA,eAAIA,MAAA,WAAA,cAAU;;;;;;;SAAd,WAAA;AAEI,aAAO,KAAK;;SAGhB,SAAe,OAAa;AAExB,WAAK,kBAAkB;AAEvB,UAAI,KAAK,gBAAgB,OACzB;AACI;;AAGJ,WAAK,cAAc;AACnB,WAAK,QAAQ;;;;;AA7sBH,EAAAA,MAAA,yBAAyB;AA+sB3C,SAAAA;EA5tB0B,MAAM;",
  "names": ["d", "b", "TEXT_GRADIENT", "TextStyle", "TextMetrics", "canvas", "Text"]
}
