{
  "version": 3,
  "sources": ["../../../pixi-graph/node_modules/node_modules/tslib/tslib.es6.js", "../../../pixi-graph/node_modules/@pixi/sprite/src/Sprite.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n", "import { BLEND_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { ObservablePoint, Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { sign } from '@pixi/utils';\n\nimport type { IBaseTextureOptions, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource|Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n*\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = PIXI.Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n    public pluginName: string;\n\n    _width: number;\n    _height: number;\n    _texture: Texture;\n    _textureID: number;\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n    protected uvs: Float32Array;\n    protected _anchor: ObservablePoint;\n    protected vertexData: Float32Array;\n\n    private vertexTrimmedData: Float32Array;\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n    private _tint: number;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    /**\n     * @param {PIXI.Texture} [texture] - The texture for this sprite.\n     */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        /**\n         * The anchor point defines the normalized coordinates\n         * in the texture that map to the position of this\n         * sprite.\n         *\n         * By default, this is `(0,0)` (or `texture.defaultAnchor`\n         * if you have modified that), which means the position\n         * `(x,y)` of this `Sprite` will be the top-left corner.\n         *\n         * Note: Updating `texture.defaultAnchor` after\n         * constructing a `Sprite` does _not_ update its anchor.\n         *\n         * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n         *\n         * @default `texture.defaultAnchor`\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        /**\n         * The texture that the sprite is using\n         *\n         * @private\n         * @member {PIXI.Texture}\n         */\n        this._texture = null;\n\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number}\n         */\n        this._width = 0;\n\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @protected\n         * @member {number}\n         */\n        this._height = 0;\n\n        /**\n         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._tint = null;\n\n        /**\n         * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 16777215\n         */\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         * Value is used for 2d CanvasRenderer.\n         *\n         * @protected\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._cachedTint = 0xFFFFFF;\n\n        /**\n         * this is used to store the uvs data of the sprite, assigned at the same time\n         * as the vertexData in calculateVertices()\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n\n        /**\n         * this is used to store the vertex data of the sprite (basically a quad)\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexData = new Float32Array(8);\n\n        /**\n         * This is used to calculate the bounds of the object IF it is a trimmed sprite\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = 'batch';\n\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /**\n     * When the texture is updated, this event will fire to update the scale and frame\n     *\n     * @protected\n     */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /**\n     * Called when the anchor position updates.\n     *\n     * @private\n     */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /**\n     * calculates worldTransform * vertices, store it in vertexData\n     */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n    }\n\n    /**\n     * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n     * This is used to ensure that the true width and height of a trimmed texture is respected\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n    *\n    * Renders the object using the WebGL renderer\n    *\n    * @protected\n    * @param {PIXI.Renderer} renderer - The webgl renderer to use.\n    */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n     * Updates the bounds of the sprite.\n     *\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return {PIXI.Sprite} The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["d", "b", "Sprite"]
}
