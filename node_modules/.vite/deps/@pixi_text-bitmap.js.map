{
  "version": 3,
  "sources": ["../../../pixi-graph/node_modules/node_modules/tslib/tslib.es6.js", "../../../pixi-graph/node_modules/@pixi/mesh/src/MeshBatchUvs.ts", "../../../pixi-graph/node_modules/@pixi/mesh/src/Mesh.ts", "../../../pixi-graph/node_modules/@pixi/mesh/src/MeshMaterial.ts", "../../../pixi-graph/node_modules/@pixi/mesh/src/MeshGeometry.ts", "../../../pixi-graph/node_modules/node_modules/tslib/tslib.es6.js", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/BitmapFontData.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/formats/TextFormat.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/formats/XMLFormat.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/formats/XMLStringFormat.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/formats/index.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/utils/generateFillStyle.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/utils/drawGlyph.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/utils/resolveCharacters.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/BitmapFont.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/BitmapText.ts", "../../../pixi-graph/node_modules/@pixi/text-bitmap/src/BitmapFontLoader.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n", "import type { TextureMatrix, Buffer } from '@pixi/core';\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    public readonly data: Float32Array;\n    public uvBuffer: Buffer;\n    public uvMatrix: TextureMatrix;\n\n    private _bufferUpdateId: number;\n    private _textureUpdateId: number;\n\n    // Internal-only properties\n    _updateID: number;\n\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer: Buffer, uvMatrix: TextureMatrix)\n    {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n\n        this._textureUpdateId = -1;\n\n        this._updateID = 0;\n    }\n\n    /**\n     * updates\n     *\n     * @param {boolean} [forceUpdate] - force the update\n     */\n    public update(forceUpdate?: boolean): void\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID\n        )\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data as Float32Array;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            (this.data as any) = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n", "import { Shader, State } from '@pixi/core';\nimport { Point, Polygon } from '@pixi/math';\nimport { BLEND_MODES, DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { MeshBatchUvs } from './MeshBatchUvs';\nimport { MeshMaterial } from './MeshMaterial';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Texture, Renderer, Geometry, Buffer } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Mesh extends GlobalMixins.Mesh {}\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Mesh<T extends Shader = MeshMaterial> extends Container\n{\n    public readonly geometry: Geometry;\n    public shader: T;\n    public state: State;\n    public drawMode: DRAW_MODES;\n    public start: number;\n    public size: number;\n\n    private vertexData: Float32Array;\n    private vertexDirty: number;\n    private _transformID: number;\n    private _roundPixels: boolean;\n    private batchUvs: MeshBatchUvs;\n\n    // Internal-only properties\n    uvs: Float32Array;\n    indices: Uint16Array;\n    _tintRGB: number;\n    _texture: Texture;\n\n    /**\n     * @param {PIXI.Geometry} geometry - the geometry the mesh will use\n     * @param {PIXI.MeshMaterial} shader - the shader the mesh will use\n     * @param {PIXI.State} [state] - the state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] - the drawMode, can be any of the PIXI.DRAW_MODES consts\n     */\n    constructor(geometry: Geometry, shader: T, state?: State, drawMode = DRAW_MODES.TRIANGLES)\n    {\n        super();\n\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry}\n         * @readonly\n         */\n        this.geometry = geometry;\n\n        geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial}\n         */\n        this.shader = shader;\n\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        this.state = state || State.for2d();\n\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number}\n         * @see PIXI.DRAW_MODES\n         */\n        this.drawMode = drawMode;\n\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number}\n         * @default 0\n         */\n        this.start = 0;\n\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number}\n         * @default 0\n         */\n        this.size = 0;\n\n        /**\n         * these are used as easy access for batching\n         * @member {Float32Array}\n         * @private\n         */\n        this.uvs = null;\n\n        /**\n         * these are used as easy access for batching\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indices = null;\n\n        /**\n         * this is the caching layer used by the batcher\n         * @member {Float32Array}\n         * @private\n         */\n        this.vertexData = new Float32Array(1);\n\n        /**\n         * If geometry is changed used to decide to re-transform\n         * the vertexData.\n         * @member {number}\n         * @private\n         */\n        this.vertexDirty = -1;\n\n        this._transformID = -1;\n\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Batched UV's are cached for atlas textures\n         * @member {PIXI.MeshBatchUvs}\n         * @private\n         */\n        this.batchUvs = null;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get uvBuffer(): Buffer\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get verticesBuffer(): Buffer\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /**\n     * Alias for {@link PIXI.Mesh#shader}.\n     * @member {PIXI.MeshMaterial}\n     */\n    set material(value: T)\n    {\n        this.shader = value;\n    }\n\n    get material(): T\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * Null for non-MeshMaterial shaders\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return 'tint' in this.shader ? (this.shader as unknown as MeshMaterial).tint : null;\n    }\n\n    set tint(value: number)\n    {\n        (this.shader as unknown as MeshMaterial).tint = value;\n    }\n\n    /**\n     * The texture that the Mesh uses.\n     *\n     * Null for non-MeshMaterial shaders\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return 'texture' in this.shader ? (this.shader as unknown as MeshMaterial).texture : null;\n    }\n\n    set texture(value: Texture)\n    {\n        (this.shader as unknown as MeshMaterial).texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        // TODO benchmark check for attribute size..\n        if (\n            shader.batchable\n            && this.drawMode === DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2\n        )\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _renderDefault(renderer: Renderer): void\n    {\n        const shader = this.shader as unknown as MeshMaterial;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        // bind and sync uniforms..\n        shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _renderToBatch(renderer: Renderer): void\n    {\n        const geometry = this.geometry;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (shader.uvMatrix)\n        {\n            shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data as Uint16Array;\n        this._tintRGB = shader._tintRGB;\n        this._texture = shader.texture;\n\n        const pluginName = (this.material as unknown as MeshMaterial).pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /**\n     * Updates vertexData field based on transform and vertices\n     */\n    public calculateVertices(): void\n    {\n        const geometry = this.geometry;\n        const verticesBuffer = geometry.buffers[0];\n        const vertices = verticesBuffer.data;\n        const vertexDirtyId = verticesBuffer._updateID;\n\n        if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n\n        this.vertexDirty = vertexDirtyId;\n    }\n\n    /**\n     * Updates uv field based on from geometry uv's or batchUvs\n     */\n    public calculateUvs(): void\n    {\n        const geomUvs = this.geometry.buffers[1];\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (!shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data as Float32Array;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     *\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices =  this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    /**\n     * Destroys the Mesh object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0)\n        {\n            this.geometry.dispose();\n        }\n\n        if (this._cachedTexture)\n        {\n            this._cachedTexture.destroy();\n            this._cachedTexture = null;\n        }\n\n        (this as any).geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n\n    /**\n     * The maximum number of vertices to consider batchable. Generally, the complexity\n     * of the geometry.\n     * @memberof PIXI.Mesh\n     * @static\n     * @member {number} BATCHABLE_SIZE\n     */\n    public static BATCHABLE_SIZE = 100;\n}\n", "import { Program, Shader, TextureMatrix } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba } from '@pixi/utils';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { Texture } from '@pixi/core';\nimport type { Dict } from '@pixi/utils';\n\nexport interface IMeshMaterialOptions {\n    alpha?: number;\n    tint?: number;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport class MeshMaterial extends Shader\n{\n    public readonly uvMatrix: TextureMatrix;\n\n    public batchable: boolean;\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tint: number;\n\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        this._colorDirty = false;\n\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        this.uvMatrix = new TextureMatrix(uSampler);\n\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        this.batchable = options.program === undefined;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set tint(value: number)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            premultiplyTintToRgba(\n                this._tint, this._alpha, this.uniforms.uColor, (baseTexture.alphaMode as unknown as boolean)\n            );\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n", "import { TYPES } from '@pixi/constants';\nimport { Buffer, Geometry } from '@pixi/core';\n\nimport type { IArrayBuffer } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nexport class MeshGeometry extends Geometry\n{\n    // Internal-only properties\n    _updateId: number;\n\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    constructor(vertices?: IArrayBuffer, uvs?: IArrayBuffer, index?: IArrayBuffer)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId(): number\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n", "/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n *\n * @class\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    public info: IBitmapFontDataInfo[];\n    public common: IBitmapFontDataCommon[];\n    public page: IBitmapFontDataPage[];\n    public char: IBitmapFontDataChar[];\n    public kerning: IBitmapFontDataKerning[];\n\n    constructor()\n    {\n        /**\n         * @member {PIXI.IBitmapFontDataInfo[]}\n         * @readOnly\n         */\n        this.info = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataCommon[]}\n         * @readOnly\n         */\n        this.common = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataPage[]}\n         * @readOnly\n         */\n        this.page = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataChar[]}\n         * @readOnly\n         */\n        this.char = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataKerning[]}\n         * @readOnly\n         */\n        this.kerning = [];\n    }\n}\n\nexport interface IBitmapFontDataInfo {\n    face: string;\n    size: number;\n}\n\nexport interface IBitmapFontDataCommon {\n    lineHeight: number;\n}\n\nexport interface IBitmapFontDataPage {\n    id: number;\n    file: string;\n}\n\nexport interface IBitmapFontDataChar {\n    id: number;\n    page: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n}\n\nexport interface IBitmapFontDataKerning {\n    first: number;\n    second: number;\n    amount: number;\n}\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataInfo\n * @property {string} face\n * @property {number} size\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataCommon\n * @property {number} lineHeight\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataPage\n * @property {number} id\n * @property {string} file\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataChar\n * @property {string} id\n * @property {number} page\n * @property {number} x\n * @property {number} y\n * @property {number} width\n * @property {number} height\n * @property {number} xoffset\n * @property {number} yoffset\n * @property {number} xadvance\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataKerning\n * @property {number} first\n * @property {number} second\n * @property {number} amount\n */\n", "import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\ninterface IBitmapFontRawData {\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n}\n\n/**\n * BitmapFont format that's Text-based.\n *\n * @class\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.indexOf('info face=') === 0;\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     *\n     * @static\n     * @private\n     * @param {string} txt - Raw string data to be converted\n     * @return {PIXI.BitmapFontData} Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        return font;\n    }\n}\n", "import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return data instanceof XMLDocument\n            && data.getElementsByTagName('page').length\n            && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     *\n     * @static\n     * @private\n     * @param {XMLDocument} xml\n     * @return {BitmapFontData} Data to use for BitmapFont\n     */\n    static parse(xml: XMLDocument): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n", "import { BitmapFontData } from '../BitmapFontData';\nimport { XMLFormat } from './XMLFormat';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.indexOf('<font>') > -1)\n        {\n            const xml = new self.DOMParser().parseFromString(data, 'text/xml');\n\n            return XMLFormat.test(xml);\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     *\n     * @static\n     * @private\n     * @param {string} xmlTxt\n     * @return {BitmapFontData} Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        const xml = new self.DOMParser().parseFromString(xmlTxt, 'text/xml');\n\n        return XMLFormat.parse(xml);\n    }\n}\n", "import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n", "import { TextStyle, TextMetrics, TEXT_GRADIENT } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string|CanvasGradient|CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[]|CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n", "import { generateFillStyle } from './generateFillStyle';\nimport { hex2rgb, string2hex } from '@pixi/utils';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    const dropShadowColor = style.dropShadowColor;\n    const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n    if (style.dropShadow)\n    {\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = style.dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n", "/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...item.split(''));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n", "import { getResolutionOfUrl } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { TextStyle, TextMetrics } from '@pixi/text';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFontData } from './BitmapFontData';\nimport { resolveCharacters, drawGlyph } from './utils';\n\nimport type { Dict } from '@pixi/utils';\nimport type { ITextStyle } from '@pixi/text';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: Dict<number>;\n}\n\nexport interface IBitmapFontOptions\n{\n    chars?: string | (string | string[])[];\n    resolution?: number;\n    padding?: number;\n    textureWidth?: number;\n    textureHeight?: number;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @class\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @readonly\n     * @static\n     * @member {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     *\n     * @readonly\n     * @static\n     * @member {PIXI.IBitmapFontOptions}\n     * @property {number} resolution=1\n     * @property {number} textureWidth=512\n     * @property {number} textureHeight=512\n     * @property {number} padding=4\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /**\n     * Collection of available/installed fonts.\n     *\n     * @readonly\n     * @static\n     * @member {Object.<string, PIXI.BitmapFont>}\n     */\n    public static readonly available: Dict<BitmapFont> = {};\n    public readonly font: string;\n    public readonly size: number;\n    public readonly lineHeight: number;\n    public readonly chars: Dict<IBitmapFontCharacter>;\n    public readonly pageTextures: Dict<Texture>;\n    private _ownsTextures: boolean;\n\n    /**\n     * @param {PIXI.BitmapFontData} data\n     * @param {PIXI.Texture[]|Object.<string, PIXI.Texture>} textures\n     * @param {boolean} ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[]|Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const res = getResolutionOfUrl(page.file);\n        const pageTextures: Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n\n        /**\n         * The name of the font face.\n         *\n         * @member {string}\n         * @readonly\n         */\n        this.font = info.face;\n\n        /**\n         * The size of the font face in pixels.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.size = info.size;\n\n        /**\n         * The line-height of the font face in pixels.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.lineHeight = common.lineHeight / res;\n\n        /**\n         * The map of characters by character code.\n         *\n         * @member {object}\n         * @readonly\n         */\n        this.chars = {};\n\n        /**\n         * The map of base page textures (i.e., sheets of glyphs).\n         *\n         * @member {object}\n         * @readonly\n         * @private\n         */\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n    }\n\n    /**\n     * Remove references to created glyph textures.\n     */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     *\n     * @static\n     * @param {XMLDocument|string|PIXI.BitmapFontData} data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]}\n     *        textures - List of textures for each page.\n     * @param managedTexture - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string|XMLDocument|BitmapFontData,\n        textures: Texture|Texture[]|Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     *\n     * @static\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     *\n     * @param {string} name - The name of the custom font to use with BitmapText.\n     * @param {object|PIXI.TextStyle} [style] - Style options to render with BitmapFont.\n     * @param {PIXI.IBitmapFontOptions} [options] - Setup options for font or name of the font.\n     * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n     *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     *      Don't forget to include spaces ' ' in your character set!\n     * @param {number} [options.resolution=1] - Render resolution for glyphs.\n     * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n     * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n     * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n     * @return {PIXI.BitmapFont} Font generated by style options.\n     * @static\n     * @example\n     * PIXI.BitmapFont.from(\"TitleFont\", {\n     *     fontFamily: \"Arial\",\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: \"purple\"\n     * });\n     *\n     * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight } = Object.assign(\n            {}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: HTMLCanvasElement;\n        let context: CanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = document.createElement('canvas');\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const metrics = TextMetrics.measureText(charsList[i], style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is `\n                        + `too small for ${style.fontSize}px fonts`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = metrics.text.charCodeAt(0);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: Math.ceil(width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0)),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: first.charCodeAt(0),\n                        second: second.charCodeAt(0),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n\n/**\n * @memberof PIXI\n * @interface IBitmapFontOptions\n * @property {string | string[] | string[][]} [chars=PIXI.BitmapFont.ALPHANUMERIC] - the character set to generate\n * @property {number} [resolution=1] - the resolution for rendering\n * @property {number} [padding=4] - the padding between glyphs in the atlas\n * @property {number} [textureWidth=512] - the width of the texture atlas\n * @property {number} [textureHeight=512] - the height of the texture atlas\n */\n", "import { ObservablePoint, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { removeItems } from '@pixi/utils';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Rectangle } from '@pixi/math';\nimport { Texture } from '@pixi/core';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\nimport type { TextStyleAlign } from '@pixi/text';\nimport { Container } from '@pixi/display';\nimport type { IDestroyOptions } from '@pixi/display';\n\ninterface PageMeshData {\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData {\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\nconst pageMeshDataPool: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n    public dirty: boolean;\n    protected _textWidth: number;\n    protected _textHeight: number;\n    protected _text: string;\n    protected _maxWidth: number;\n    protected _maxLineHeight: number;\n    protected _letterSpacing: number;\n    protected _anchor: ObservablePoint;\n    protected _fontName: string;\n    protected _fontSize: number;\n    protected _align: TextStyleAlign;\n    protected _activePagesMeshData: PageMeshData[];\n    protected _tint = 0xFFFFFF;\n    protected _roundPixels: boolean;\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param {string} text - A string that you would like the text to display.\n     * @param {object} style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        /**\n         * Collection of page mesh data.\n         *\n         * @member {object}\n         * @private\n         */\n        this._activePagesMeshData = [];\n\n        /**\n         * Private tracker for the width of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textWidth = 0;\n\n        /**\n         * Private tracker for the height of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textHeight = 0;\n\n        /**\n         * Private tracker for the current text align.\n         *\n         * @member {string}\n         * @private\n         */\n        this._align = align;\n\n        /**\n         * Private tracker for the current tint.\n         *\n         * @member {number}\n         * @private\n         */\n        this._tint = tint;\n\n        /**\n         * Private tracker for the current font name.\n         *\n         * @member {string}\n         * @private\n         */\n        this._fontName = fontName;\n\n        /**\n         * Private tracker for the current font size.\n         *\n         * @member {number}\n         * @private\n         */\n        this._fontSize = fontSize || BitmapFont.available[fontName].size;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = text;\n\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting value to 0\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxWidth = maxWidth;\n\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * ie: when trying to vertically align. (Internally used)\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxLineHeight = 0;\n\n        /**\n         * Letter spacing. This is useful for setting the space between characters.\n         * @member {number}\n         * @private\n         */\n        this._letterSpacing = letterSpacing;\n\n        /**\n         * Text anchor. read-only\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering\n         *\n         * @member {boolean}\n         * @default PIXI.settings.ROUND_PIXELS\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Set to `true` if the BitmapText needs to be redrawn.\n         *\n         * @member {boolean}\n         */\n        this.dirty = true;\n\n        /**\n         * Cached char texture is destroyed when BitmapText is destroyed\n         * @member {Record<number, Texture>}\n         * @private\n         */\n        this._textureCache = {};\n    }\n\n    /**\n     * Renders text and updates it when needed. This should only be called\n     * if the BitmapFont is regenerated.\n     */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const scale = this._fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const textLength = text.length;\n        const maxWidth = this._maxWidth * data.size / this._fontSize;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < textLength; i++)\n        {\n            const charCode = text.charCodeAt(i);\n            const char = text.charAt(i);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = pos.x + charData.xOffset + (this._letterSpacing / 2);\n            charRenderData.position.y = pos.y + charData.yOffset;\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x + charData.texture.orig.width;// Use charRenderData position!\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = text.charAt(text.length - 1);\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            pageMeshDataPool.push(activePagesMeshData[i]);\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    const material = new MeshMaterial(Texture.EMPTY);\n\n                    const mesh = new Mesh(geometry, material);\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tint;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1)\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n    }\n\n    /**\n     * Updates the transform of this object\n     *\n     * @private\n     */\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return {PIXI.Rectangle} The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    protected validate(): void\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @member {number}\n     * @default 0xffffff\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        if (this._tint === value) return;\n\n        this._tint = value;\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The name of the BitmapFont.\n     *\n     * @member {string}\n     */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The size of the font to display.\n     *\n     * @member {number}\n     */\n    public get fontSize(): number\n    {\n        return this._fontSize;\n    }\n\n    public set fontSize(value: number)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * @member {PIXI.Point | number}\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /**\n     * The text of the BitmapText object.\n     *\n     * @member {string}\n     */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     *\n     * @member {number}\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /**\n     * Additional space between characters.\n     *\n     * @member {number}\n     */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n", "import { LoaderResource } from '@pixi/loaders';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Loader } from '@pixi/loaders';\nimport type { Dict } from '@pixi/utils';\nimport type { Texture } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class BitmapFontLoader\n{\n    /**\n     * Called when the plugin is installed.\n     *\n     * @see PIXI.Loader.registerPlugin\n     */\n    public static add(): void\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n    }\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(this: Loader, resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        const format = autoDetectFormat(resource.data);\n\n        // Resource was not recognised as any of the expected font data format\n        if (!format)\n        {\n            next();\n\n            return;\n        }\n\n        const baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n        const data = format.parse(resource.data);\n        const textures: Dict<Texture> = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page: LoaderResource): void =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === data.page.length)\n            {\n                resource.bitmapFont = BitmapFont.install(data, textures, true);\n                next();\n            }\n        };\n\n        for (let i = 0; i < data.page.length; ++i)\n        {\n            const pageFile = data.page[i].file;\n            const url = baseUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource: LoaderResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n\n    /**\n     * Get folder path from a resource\n     * @private\n     * @param {PIXI.Loader} loader\n     * @param {PIXI.LoaderResource} resource\n     * @return {string}\n     */\n    private static getBaseUrl(loader: Loader, resource: LoaderResource): string\n    {\n        let resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (resUrl === '.')\n            {\n                resUrl = '';\n            }\n\n            if (loader.baseUrl && resUrl)\n            {\n                // if baseurl has a trailing slash then add one to resUrl so the replace works below\n                if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/')\n                {\n                    resUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from resUrl\n        resUrl = resUrl.replace(loader.baseUrl, '');\n\n        // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/')\n        {\n            resUrl += '/';\n        }\n\n        return resUrl;\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     * @private\n     * @param {string} url - Path to get directory for\n     */\n    private static dirname(url: string): string\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n}\n"],
  "mappings": "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",
  "names": ["d", "b", "MeshBatchUvs", "Mesh", "MeshMaterial", "MeshGeometry", "extendStatics", "d", "b", "__extends", "BitmapFontData", "TextFormat", "XMLFormat", "XMLStringFormat", "BitmapFont", "BitmapText", "BitmapFontLoader"]
}
