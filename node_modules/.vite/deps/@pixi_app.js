import {
  Container
} from "./chunk-Q4VYVUYK.js";
import {
  autoDetectRenderer
} from "./chunk-QNDMGAQH.js";
import "./chunk-6IDTDDQ4.js";
import "./chunk-2J3TKREV.js";
import "./chunk-MITDHAZJ.js";
import "./chunk-R5PW3AE4.js";
import "./chunk-4WFBNS3T.js";
import "./chunk-DFKQJ226.js";

// pixi-graph/node_modules/@pixi/app/dist/esm/app.js
var Application = function() {
  function Application2(options) {
    var _this = this;
    this.stage = new Container();
    options = Object.assign({
      forceCanvas: false
    }, options);
    this.renderer = autoDetectRenderer(options);
    Application2._plugins.forEach(function(plugin) {
      plugin.init.call(_this, options);
    });
  }
  Application2.registerPlugin = function(plugin) {
    Application2._plugins.push(plugin);
  };
  Application2.prototype.render = function() {
    this.renderer.render(this.stage);
  };
  Object.defineProperty(Application2.prototype, "view", {
    /**
     * Reference to the renderer's canvas element.
     * @member {HTMLCanvasElement}
     * @readonly
     */
    get: function() {
      return this.renderer.view;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Application2.prototype, "screen", {
    /**
     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.
     * @member {PIXI.Rectangle}
     * @readonly
     */
    get: function() {
      return this.renderer.screen;
    },
    enumerable: false,
    configurable: true
  });
  Application2.prototype.destroy = function(removeView, stageOptions) {
    var _this = this;
    var plugins = Application2._plugins.slice(0);
    plugins.reverse();
    plugins.forEach(function(plugin) {
      plugin.destroy.call(_this);
    });
    this.stage.destroy(stageOptions);
    this.stage = null;
    this.renderer.destroy(removeView);
    this.renderer = null;
  };
  Application2._plugins = [];
  return Application2;
}();
var ResizePlugin = function() {
  function ResizePlugin2() {
  }
  ResizePlugin2.init = function(options) {
    var _this = this;
    Object.defineProperty(
      this,
      "resizeTo",
      /**
       * The HTML element or window to automatically resize the
       * renderer's view element to match width and height.
       * @member {Window|HTMLElement}
       * @name resizeTo
       * @memberof PIXI.Application#
       */
      {
        set: function(dom) {
          self.removeEventListener("resize", this.queueResize);
          this._resizeTo = dom;
          if (dom) {
            self.addEventListener("resize", this.queueResize);
            this.resize();
          }
        },
        get: function() {
          return this._resizeTo;
        }
      }
    );
    this.queueResize = function() {
      if (!_this._resizeTo) {
        return;
      }
      _this.cancelResize();
      _this._resizeId = requestAnimationFrame(function() {
        return _this.resize();
      });
    };
    this.cancelResize = function() {
      if (_this._resizeId) {
        cancelAnimationFrame(_this._resizeId);
        _this._resizeId = null;
      }
    };
    this.resize = function() {
      if (!_this._resizeTo) {
        return;
      }
      _this.cancelResize();
      var width;
      var height;
      if (_this._resizeTo === self) {
        width = self.innerWidth;
        height = self.innerHeight;
      } else {
        var _a = _this._resizeTo, clientWidth = _a.clientWidth, clientHeight = _a.clientHeight;
        width = clientWidth;
        height = clientHeight;
      }
      _this.renderer.resize(width, height);
    };
    this._resizeId = null;
    this._resizeTo = null;
    this.resizeTo = options.resizeTo || null;
  };
  ResizePlugin2.destroy = function() {
    self.removeEventListener("resize", this.queueResize);
    this.cancelResize();
    this.cancelResize = null;
    this.queueResize = null;
    this.resizeTo = null;
    this.resize = null;
  };
  return ResizePlugin2;
}();
Application.registerPlugin(ResizePlugin);
export {
  Application
};
/*! Bundled license information:

@pixi/app/dist/esm/app.js:
  (*!
   * @pixi/app - v6.1.2
   * Compiled Thu, 12 Aug 2021 17:11:19 UTC
   *
   * @pixi/app is licensed under the MIT License.
   * http://www.opensource.org/licenses/mit-license
   *)
*/
//# sourceMappingURL=@pixi_app.js.map
